import{_ as s,c as e,o as a,V as i}from"./chunks/framework.BDcLCbPe.js";const n="/nuxt-3-server-fundamentals/assets/screen41.BbafykZ4.jpg",t="/nuxt-3-server-fundamentals/assets/screen42.2G6T7Chs.jpg",l="/nuxt-3-server-fundamentals/assets/screen43.CJTfeMIz.jpg",p="/nuxt-3-server-fundamentals/assets/screen44.sHgCFoXe.jpg",r="/nuxt-3-server-fundamentals/assets/screen45.BBlsSJRq.jpg",o="/nuxt-3-server-fundamentals/assets/screen46.CGNgQpLn.jpg",h="/nuxt-3-server-fundamentals/assets/screen47.tEFvK-U7.jpg",d="/nuxt-3-server-fundamentals/assets/screen48.BpSAovOm.jpg",k="/nuxt-3-server-fundamentals/assets/screen49.C-pQ719l.jpg",c="/nuxt-3-server-fundamentals/assets/screen50.BsKyMEvY.jpg",E="/nuxt-3-server-fundamentals/assets/screen51.Dgb1x3Wr.jpg",g="/nuxt-3-server-fundamentals/assets/screen52.BjYi1mnW.jpg",u="/nuxt-3-server-fundamentals/assets/screen53.B8JaAkWy.jpg",y="/nuxt-3-server-fundamentals/assets/screen54.CxoFWVGv.jpg",m="/nuxt-3-server-fundamentals/assets/screen55.IzxDzYAQ.jpg",v="/nuxt-3-server-fundamentals/assets/screen56.tKpDA_H6.jpg",F="/nuxt-3-server-fundamentals/assets/screen57.BIrVlkdW.jpg",C="/nuxt-3-server-fundamentals/assets/screen58.CVFwckW_.jpg",P=JSON.parse('{"title":"Middleware de Servidor","description":"","frontmatter":{},"headers":[],"relativePath":"server-middleware.md","filePath":"server-middleware.md"}'),f={name:"server-middleware.md"},b=i('<h1 id="middleware-de-servidor" tabindex="-1">Middleware de Servidor <a class="header-anchor" href="#middleware-de-servidor" aria-label="Permalink to &quot;Middleware de Servidor&quot;">‚Äã</a></h1><blockquote><p>Ahora que hemos terminado de trabajar con los puntos finales de la API del servidor, exploremos el middleware del servidor.</p></blockquote><h2 id="conceptos-basicos-del-middleware-del-servidor" tabindex="-1">Conceptos b√°sicos del middleware del servidor <a class="header-anchor" href="#conceptos-basicos-del-middleware-del-servidor" aria-label="Permalink to &quot;Conceptos b√°sicos del middleware del servidor&quot;">‚Äã</a></h2><p>Cerremos la carpeta <code>api/</code>, por ahora, y luego en la carpeta <code>server/</code> hagamos clic derecho y luego creemos una nueva carpeta. Llam√©mosla <code>middleware/</code>, aqu√≠ leer√° autom√°ticamente cualquier archivo dentro de esta carpeta y se leer√° como un middleware de servidor.</p><p><img src="'+n+'" alt="screen12"></p><p>A continuaci√≥n creemos un nuevo archivo llamado <code>log.ts</code>.</p><p><img src="'+t+`" alt="screen12"></p><p>Por cierto, puedes nombrar este archivo aqu√≠ como quieras. En mi caso es un <code>log.ts</code> en este ejemplo. Tambi√©n observe que no estamos estamos a√±adiendo ning√∫n tipo de sufijo relacionado con m√©todos HTTP porque no lo necesitamos en el middleware.</p><p>Entonces, aqu√≠ en el archivo el mismo proceso. Exportemos por defecto la funci√≥n <code>defineEventHandler</code> pasandole <code>event</code> como par√°metro y luego registrar en la c√≥nsola <code>&#39;Middleware&#39;</code>.</p><p>üìÉ<code>./server/middleware/log.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Middleware&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Entoces abrir Postman y luego, si recuerdas, esta es <a href="./server-api-basic-route.html">la primera <code>api/</code> que creamos</a>. As√≠ que devolver√° el <code>&#39;Hello World with GET method&#39;</code>. As√≠ que enviemos esto: <code>http://localhost:3000/api/test</code>.</p><p><img src="`+l+'" alt="screen12"></p><p>Vamos a la terminal, y como podemos ver, genera el <code>Middleware</code>.</p><p><img src="'+p+`" alt="screen12"></p><div class="info custom-block"><p class="custom-block-title">Importante</p><p>El middleware se ejecutar√° primero antes de llegar a cualquier API. Es √∫til, si por ejemplo, estamos haciendo algunas validaciones o registrando cualquier solicitud o extendiendo los eventos.</p></div><h2 id="pasando-a-la-accion" tabindex="-1">Pasando a la acci√≥n <a class="header-anchor" href="#pasando-a-la-accion" aria-label="Permalink to &quot;Pasando a la acci√≥n&quot;">‚Äã</a></h2><p>Veamos esto en acci√≥n, por ejemplo, en este mismo archivo vamos a ejecutar una validaci√≥n simple de si la autorizaci√≥n existe. Simplemente eliminemos el cuerpo de la funci√≥n y luego usaremos una <a href="https://h3.unjs.io/utils/request#getrequestheaderevent-name" target="_blank" rel="noreferrer">utilidad <em><strong>h3</strong></em> que es <code>getRequestHeader</code></a> y luego el primer par√°metro ser√° el <code>event</code> y luego el segundo par√°metro ser√° el valor del encabezado, que ser√° <code>authorization</code>. Puede usar una <code>&#39;A&#39;</code> may√∫scula o min√∫scula, eso funcionar√° igualmente. Luego registremos la consola (por ahora), entonces gu√°rdelo.</p><p>üìÉ<code>./server/middleware/log.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authorization)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Tenga en cuenta que no estamos haciendo ninguna validaci√≥n por ahora, solo estamos registrando en la consola la <code>authorization</code>. De vuelta a Postman enviemos la API, abramos la terminal, y como se esperaba, genera el resultado <code>undefined</code>.</p><p><img src="`+r+'" alt="screen12"></p><p>La raz√≥n de esto es que no especificamos la autorizaci√≥n, as√≠ que intentemos hacerlo. Aseg√∫rese de que si est√° usando una <code>a</code> peque√±a para <code>authorization</code> use una peque√±a aqu√≠ tambi√©n. Luego agregamos el valor que ser√° <code>123</code> ya que este es solo un ejemplo simple.</p><p><img src="'+o+'" alt="screen12"></p><p>Env√≠elo y generar√° <code>123</code>.</p><p><img src="'+h+`" alt="screen12"></p><h2 id="ejecutando-una-validacion" tabindex="-1">Ejecutando una validaci√≥n <a class="header-anchor" href="#ejecutando-una-validacion" aria-label="Permalink to &quot;Ejecutando una validaci√≥n&quot;">‚Äã</a></h2><p>Vamos a ejecutar una validaci√≥n, de modo que si hay un valor de <code>authorization</code> est√° bien, si no es <code>undefined</code>. Usaremos otra <a href="https://h3.unjs.io/guide/event#eventcontext" target="_blank" rel="noreferrer">utilidad <strong><em>h3</em></strong> que es el <code>event.context</code></a>. Puedes simplemente establecer cualquier valor que desees, por lo que en este ejemplo ser√° <code>authorized</code>. Y luego estableceremos ese valor en <code>true</code>. Puedes usar cualquier valor siempre y cuando uses el <code>event.context</code> y luego, el valor que quieres. Entonces en este ejemplo est√° <code>authorized</code>.</p><p>üìÉ<code>./server/middleware/log.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (authorization) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.context.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.context.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Entonces, cierre la terminal por ahora y luego, si no hay un valor de <code>authorization</code> se establecer√° el <code>event.context.authorized</code> en <code>false</code>, de lo contrario ser√° <code>true</code>.</p><p>Luego, dado que estamos usando la API de punto final <code>http://localhost:3000/api/test</code> vamos al archivo.</p><p><img src="`+d+`" alt="screen12"></p><p>Y hagamos el registro de c√≥nsola por ahora con el <code>event.context.authorized</code>.</p><p>üìÉ<code>./server/api/test.get.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.context.authorized)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World with GET method&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Luego, enviemos esto nuevamente, de vuelta a Postman para que pueda ver la API.</p><p><img src="`+k+'" alt="screen12"></p><p>Pueda ver que sale <code>true</code> ya que hay un valor en nuestra variable <code>authorized</code>.</p><p><img src="'+c+'" alt="screen12"></p><p>Dentro de Postman, voy a eliminar la <code>authorization</code> para que d√© como resultado <code>false</code>.</p><p><img src="'+E+'" alt="screen12"></p><p>Vamos a la terminal y vemos que ahora se registra <code>false</code>.</p><p><img src="'+g+`" alt="screen12"></p><h2 id="arrojando-un-error" tabindex="-1">Arrojando un <code>error</code> <a class="header-anchor" href="#arrojando-un-error" aria-label="Permalink to &quot;Arrojando un \`error\`&quot;">‚Äã</a></h2><p>Esa es nuestra validaci√≥n simple, as√≠ que, intentemos arrojar un error.</p><p>Por ejemplo, si el <code>authorized</code> es <code>false</code>, devolvamos el error. Entonces el <code>statusCode</code> ser√° <code>401</code> y luego un <code>statusMessage</code> que ser√° <code>Unauthorized</code>. As√≠ que b√°sicamente si el <code>authorized</code> es <code>false</code> crear√° un error y eso arrojar√° un c√≥digo <code>401</code> con un mensaje <code>Unauthorized</code>.</p><p>üìÉ<code>./server/api/test.get.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">event.context.authorized) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({statusCode:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, statusMessage: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World with GET method&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Vamos a ver eso en acci√≥n en Postman. Como puede ver, el <code>Headers</code> de <code>authorization</code> est√° actualmente deshabilitado, por lo que deber√≠a estar mostrando el error. As√≠ que env√≠alo y, como puedes ver, dice <code>401 Unauthorized</code>.</p><p><img src="`+u+`" alt="screen12"></p><p>Es posible que podr√≠as estar preguntando si estamos haciendo una validaci√≥n m√∫ltiple o repetida, as√≠ que vamos a refactorizar.</p><p>En lo adelante, en el archivo <code>./server/api/test.get.ts</code> simplemente registraremos un <code>console.log(event.context.authorized)</code> en caso de que est√© autorizado.</p><p>üìÉ<code>./server/api/test.get.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.context.authorized)  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello World with GET method&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Y en el archivo <code>./server/api/middleware/log.ts</code> lanzaremos un error cuando <code>authorization</code> no est√© definido.</p><p>üìÉ<code>./server/api/middleware/log.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (authorization) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.context.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({statusCode:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, statusMessage: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Bastante sencillo, as√≠ que vamos a probarlo y todo deber√≠a de estar funcionando exactamente igual. Ejecutemos eso nuevamente para que el resultado esperado sea nuevamente un error, y para que pueda ver <code>401 Unauthorized</code>.</p><p>Pero si en Postman habilitamos la <code>authorization</code> y lo enviamos.</p><p><img src="`+y+'" alt="screen12"></p><p>Entonces <code>console.log</code> registra <code>true</code>.</p><p><img src="'+m+`" alt="screen12"></p><p>Eso tiene sentido, as√≠ que ese es uno de los ejemplos perfectos del middleware.</p><h2 id="otro-ejemplo" tabindex="-1">Otro ejemplo <a class="header-anchor" href="#otro-ejemplo" aria-label="Permalink to &quot;Otro ejemplo&quot;">‚Äã</a></h2><p>Intentemos con otro ejemplo, esta vez estableceremos un encabezado espec√≠fico en un punto final API determinado, por lo que el middleware es el lugar perfecto para hacerlo. Lo que suceder√° es que antes de que llegue al punto final <code>/api/test</code> establecer√° el encabezado.</p><p>Escribamos la validaci√≥n primero usando otra <a href="https://h3.unjs.io/utils/request#getrequesturlevent-opts-xforwardedhost-xforwardedproto" target="_blank" rel="noreferrer">utilidad de h3 que es <code>getRequestURL</code></a>. Esta utilidad recibe la propiedad <code>event</code> y con ella verificaremos si el <code>pathname</code> incluye <code>&#39;/api/test&#39;</code>.</p><p>Con esto validaremos el punto final de la API de prueba. Si el <code>pathname</code> incluye <code>&#39;/api/test&#39;</code> entonces registraremos en la c√≥nsola <code>&#39;Correct endpoint&#39;</code> solo para verificarlo.</p><p>üìÉ<code>./server/api/middleware/log.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (authorization) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.context.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({statusCode:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, statusMessage: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRequestURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event).pathname.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)){</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Correct endpoint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Enviemos desde Postman el punto final <code>http://localhost:3000/api/test</code> y en el terminal aparecer√° <code>&#39;Correct endpoint&#39;</code> ya que este punto final incluye <code>&#39;/api/test&#39;</code>.</p><p><img src="`+v+`" alt="screen12"></p><p>Esta vez nuevamente utilizaremos otra <a href="https://h3.unjs.io/utils/response#setheaderevent-name-value" target="_blank" rel="noreferrer">utilidad h3 que es <code>setHeader</code></a>. As√≠ que configuremos el encabezado con el par√°metro <code>event</code>, luego la variable <code>&#39;authorization&#39;</code> como segundo par√°metro y luego el valor de la variable como tercer par√°metro que ser√° <code>&#39;my-custom-authorization-value&#39;</code>.</p><p>üìÉ<code>./server/api/middleware/log.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineEventHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (authorization) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.context.authorized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({statusCode:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, statusMessage: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Unauthorized&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRequestURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event).pathname.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)){    </span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authorization&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-custom-authorization-value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Vayamos a Postman y seleccionemo para ver los <em><strong>Headers</strong></em> b√°sicos de la respuesta.</p><p><img src="`+F+'" alt="screen12"></p><p>Pero si repetimos la solicitud podemos ver entonces la variable <code>authorization</code> con el valor <code>&#39;my-custom-authorization-value&#39;</code> en los encabezados.</p><p><img src="'+C+'" alt="screen12"></p><p>As√≠ que espero que hayas aprendido algo en el middleware del servidor. Esto es todo el tema sobre los middleware y a continuaci√≥n continuaremos con los complementos.</p>',80),A=[b];function q(B,z,_,D,x,j){return a(),e("div",null,A)}const H=s(f,[["render",q]]);export{P as __pageData,H as default};
